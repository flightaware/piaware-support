#!/bin/sh -e

# rpi-bootconfig: bootloader hook that updates /boot/config.txt when
# kernels or initrd/initramfs images are modified

# call as:
#   rpi-bootconfig install <kernel-version> [<path-to-installed-kernel>]   # record a newly installed kernel
#   rpi-bootconfig remove <kernel-version> [<path-to-removed-kernel>]      # record removal of an existing kernel
#   rpi-bootconfig initramfs <kernel-version> <path-to-initramfs>          # record update of an initramfs
#   rpi-bootconfig scan                                                    # look for installed kernels/initramfs and record them
#   rpi-bootconfig update                                                  # rewrite /boot/config.txt based on currently recorded state

[ -f /etc/default/rpi-bootconfig ] && . /etc/default/rpi-bootconfig

: ${BOOTCONFIG:=/boot/config.txt}
: ${TEMPLATE:=${BOOTCONFIG}}
: ${STATEDIR:=/var/lib/rpi-bootconfig}

set_kernel_version() {
    kver="$1"
    case "$kver" in
        *-v8+)
            kpath=kernel8.img
            ;;
        *-v7l+)
            kpath=kernel7l.img
            ;;
        *-v7+)
            kpath=kernel7.img
            ;;
        *+)
            kpath=kernel.img
            ;;
        *-rpi|*-rpi2)
            kpath=vmlinuz-${kver}
            ;;
        *)
            echo "$0: unrecognized kernel version $1, skipping"
            exit 0
            ;;
    esac
}

set_initramfs() {
    if [ -z "$1" ]; then
        echo "$0: missing initramfs path" >&2
        exit 1
    fi

    if [ "$(dirname $1)" != "/boot" ]; then
        echo "$0: initramfs must be in /boot" >&2
        exit 1
    fi

    initramfs=$(basename "$1")
}

set_kernel_image() {
    if [ -n "$1" ]; then
        if [ "$(dirname $1)" != "/boot" ]; then
            echo "$0: kernel image must be in /boot" >&2
            exit 1
        fi
        kpath=$(basename "$1")
    fi
}

do_install() {
    echo "rpi-bootconfig: recording installation of kernel ${kver}" >&2
    echo "$kpath" >${STATEDIR}/${kver}
}

do_remove() {
    echo "rpi-bootconfig: recording removal of kernel ${kver}" >&2
    rm -f ${STATEDIR}/${kver}
}

do_initramfs() {
    echo "rpi-bootconfig: recording update of initramfs for kernel ${kver}" >&2
    echo ${initramfs} >${STATEDIR}/${kver}_initramfs
}

do_scan() {
    # find existing kernels
    for v in /lib/modules/*; do
        v=$(basename $v)
        unset kpath kver
        case "$v" in
            *+|*-rpi|*-rpi2)
                set_kernel_version "$v"
                ;;

            *)
                # unknown, skip
                ;;
        esac

        if [ -n "$kver" ] && [ -f "/boot/$kpath" ]; then
            do_install

            # look for an initramfs too
            initramfs="initrd.img-${kver}"
            if [ -f "/boot/${initramfs}" ]; then
                do_initramfs
            fi
        fi
    done
}

do_update() {
    # extra paranoia
    if [ "$ENABLED" != "yes"  ]; then
        echo "rpi-bootconfig: not enabled in /etc/default/rpi-bootconfig" >&2
        return
    fi

    echo "rpi-bootconfig: updating $BOOTCONFIG" >&2
    if [ "$TEMPLATE" != "$BOOTCONFIG" ]; then
        echo "rpi-bootconfig: using template config $TEMPLATE" >&2
    fi

    if [ ! -e "$TEMPLATE" ]; then
        echo "rpi-bootconfig: can't find template config $TEMPLATE, giving up" >&2
        exit 1
    fi

    # find target kernels
    best_v8=""
    best_v7l=""
    best_v7=""
    best_v6=""

    for v in /var/lib/rpi-bootconfig/*; do
        v=$(basename $v)
        case "$v" in
            *-v8+)
                if dpkg --compare-versions "$v" gt "$best_v8" 2>/dev/null; then
                    best_v8="$v"
                fi
                ;;

            *-v7l+)
                if dpkg --compare-versions "$v" gt "$best_v7l" 2>/dev/null; then
                    best_v7l="$v"
                fi
                ;;

            *-v7+|*-rpi2)
                if dpkg --compare-versions "$v" gt "$best_v7" 2>/dev/null; then
                    best_v7="$v"
                fi
                ;;

            *+|*-rpi)
                if dpkg --compare-versions "$v" gt "$best_v6" 2>/dev/null; then
                    best_v6="$v"
                fi
                ;;
        esac
    done

    unset kernel_pi0 kernel_pi0w kernel_pi02 kernel_pi1 kernel_pi2 kernel_pi3 kernel_pi4
    unset initramfs_pi0 initramfs_pi0w initramfs_pi02 initramfs_pi1 initramfs_pi2 initramfs_pi3 initramfs_pi4
    if [ -n "$best_v6" ]; then
        kver_pi0=${best_v6}
        kver_pi0w=${best_v6}
        kver_pi1=${best_v6}

        if [ -e ${STATEDIR}/${best_v6}_initramfs ]; then
            initramfs_pi0=$(cat ${STATEDIR}/${best_v6}_initramfs)
            initramfs_pi0w=$(cat ${STATEDIR}/${best_v6}_initramfs)
            initramfs_pi1=$(cat ${STATEDIR}/${best_v6}_initramfs)
        fi
    fi

    if [ -n "$best_v7" ]; then
        kver_pi02=${best_v7}
        kver_pi2=${best_v7}
        kver_pi3=${best_v7}
        # use v7 on pi4 if no v7l available
        kver_pi4=${best_v7}

        if [ -e ${STATEDIR}/${best_v7}_initramfs ]; then
            initramfs_pi02=$(cat ${STATEDIR}/${best_v7}_initramfs)
            initramfs_pi2=$(cat ${STATEDIR}/${best_v7}_initramfs)
            initramfs_pi3=$(cat ${STATEDIR}/${best_v7}_initramfs)
            initramfs_pi4=$(cat ${STATEDIR}/${best_v7}_initramfs)
        fi
    fi

    if [ -n "$best_v7l" ]; then
        kver_pi4=${best_v7l}

        if [ -e ${STATEDIR}/${best_v7l}_initramfs ]; then
            initramfs_pi4=$(cat ${STATEDIR}/${best_v7l}_initramfs)
        fi
    fi

    rm -f $BOOTCONFIG.new
    (
        if [ "$TEMPLATE" != "$BOOTCONFIG" ]; then
            echo "# rpi-bootconfig template: $TEMPLATE"
        fi
        sed -e "/^## start of rpi-bootconfig autogenerated section/,/^## end of rpi-bootconfig autogenerated section/ d" <$TEMPLATE
        echo "## start of rpi-bootconfig autogenerated section. Do not modify or remove this line."
        echo "[all]"

        # Order is significant here, because [pi0] applies to all of the Zero, Zero W, and Zero 2W
        # and we need to provide different settings on the 2W, so they need to come later.
        for hw in pi0 pi0w pi02 pi1 pi2 pi3 pi4; do
            eval kver=\${kver_${hw}}
            if [ -n "${kver}" ]; then
                kernel=$(cat ${STATEDIR}/${kver})
                if [ -f "/boot/${kernel}" ]; then
                    echo -n "rpi-bootconfig: ${hw} using kernel ${kver} (${kernel}) " >&2
                    echo "[${hw}]"
                    echo "kernel=${kernel}"

                    eval initramfs=\${initramfs_${hw}}
                    if [ -f "/boot/${initramfs}" ]; then
                        echo "and initramfs ${initramfs}" >&2
                        echo "initramfs ${initramfs} followkernel"
                    else
                        echo "and no initramfs" >&2
                    fi
                else
                    echo "rpi-bootconfig: ${hw} kernel ${kver} (/boot/${kernel}) is missing, skipped" >&2
                fi
            else
                echo "rpi-bootconfig: ${hw} has no suitable kernel, skipped" >&2
            fi
        done

        echo "[all]"
        echo "## end of rpi-bootconfig autogenerated section. Do not modify or remove this line."
    ) >$BOOTCONFIG.new

    sync
    mv $BOOTCONFIG.new $BOOTCONFIG
    sync
}

case "$1" in
    initramfs)
        set_kernel_version "$2"
        set_initramfs "$3"
        do_initramfs
        ;;

    install)
        set_kernel_version "$2"
        set_kernel_image "$3"
        do_install
        ;;

    remove)
        set_kernel_version "$2"
        # optional image path ignored
        do_remove
        ;;

    scan)
        do_scan
        ;;

    update)
        do_update
        ;;

    *)
        echo "$0: unrecognized mode $1 (should be install/remove/initramfs/scan/update)" >&2
        exit 1
        ;;
esac

exit 0
